@using System.Collections.Generic;
@using System.Timers;
@using Sandbox.Source;
@page "/"


<PageTitle>Index</PageTitle>

<div class="game-top-row">
    <h1>Sandbox</h1>
    <div>
        <button class="game-button" @onclick="@StartGame" @onkeydown="@GetUserKeyInput">Start Game</button>
        <button class="game-button" @onclick="@EndGame">End Game</button>
    </div>
</div>

<svg xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:ev="http://www.w3.org/2001/sml-events"
        viewbox="0 0 @WIDTH @HEIGHT"
        class="arena">

@((MarkupString)SVG_Markup)

</svg>

    <input type="text" class="game-console-input" @bind="@ConsoleInput" @bind:event="oninput"
        @onkeyup="@ProcessConsoleInput" @onkeyup:preventDefault>

<div class="game-console">
    @((MarkupString)ConsoleOutput)
</div>



@code {

    private static readonly int WIDTH = 900;
    private static readonly int HEIGHT = 600;
    private static readonly char[] BADCHARS = {'<', '>', '(', ')', '/', '\\', '\'', '\"', '=', ';'};

    private static readonly string StartColor = "#a0a0a0";
    private static readonly string BlueColor = "#aaaacc";
    private static readonly string GreenColor = "#aaccaa";
    private static readonly string RedColor = "#ccaaaa";

    private string ConsoleInput = ">> ";
    private string ConsoleOutput = "";
    private List<string> ConsoleEntries = new List<string>();
    private int ConsoleEntriesIndex = 0;

    private int pRed = 160;
    private int pBlue = 160;
    private int pGreen = 160;

    private int vRed = 1;
    private int vGreen = 2;
    private int vBlue = 3;

    private string PlayerColor = "";

    private bool TimerDisposed = false;
    private static int FPS = 40;
    private static int MSperFrame = 1000/FPS;
    private Timer gameTimer = new Timer(MSperFrame);
    private bool FrameComplete = true;


    private string SVG_Markup = "<rect x=\"0\" y=\"0\" width=\"" + WIDTH + "\" height=\"" + HEIGHT
        + "\" fill=\"" + StartColor + "\"></rect>";

    private string Buffer = "";

    private void StartGame() {

        if (TimerDisposed) gameTimer = new Timer(MSperFrame);
        PlayerColor = StartColor;
        SVG_Markup = Rect(0, 0, WIDTH, HEIGHT, PlayerColor);

        Sprite ball = new Sprite(10, 10);
        ball.Markup = "";

        gameTimer.Elapsed += UpdateGame;
        gameTimer.AutoReset = true;
        gameTimer.Enabled = true;

        Console.WriteLine("Game started.");

    }

    private void UpdateGame(Object? source, ElapsedEventArgs e) {

        if (!FrameComplete)
        {
            Console.WriteLine("Frame was not completed.");
            if (FPS >= 10) --FPS;
        }

        FrameComplete = false;

        if (pRed == 255 || pRed == 0) vRed *= -1;
        if (pGreen >= 254 || pGreen <= 1) vGreen *= -1;
        if (pBlue >= 253 || pBlue <= 2) vBlue *= -1;

        pRed += vRed;
        pGreen += vGreen;
        pBlue += vBlue;

        Buffer = Rect(0, 0, WIDTH, HEIGHT, GetHexColor(pRed, pGreen, pBlue));
        Render();
        @* Console.WriteLine("Time: " + e.SignalTime); *@
    }

    private void PauseGame() {

        Console.WriteLine("Game paused.");
    }

    private void Render() {

        SVG_Markup = Buffer;
        StateHasChanged();
        FrameComplete = true;
    }

    private void EndGame() {

        gameTimer.Enabled = false;

        try {
            gameTimer.Dispose();
            TimerDisposed = true;
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }

        SVG_Markup = Rect(0, 0, WIDTH, HEIGHT, StartColor);
        Console.WriteLine("Game ended.");
    }

    private void GetUserKeyInput(KeyboardEventArgs kArgs) {

        if (kArgs.Code.Equals("KeyA"))
        {
            PrintToConsole("A pressed.");

        }

        else if (kArgs.Code.Equals("KeyW"))
        {
            PrintToConsole("W pressed.");

        }

        else if (kArgs.Code.Equals("KeyS"))
        {
            PrintToConsole("S pressed.");

        }

        else if (kArgs.Code.Equals("KeyD"))
        {
            PrintToConsole("D pressed.");

        }

    }

    private void ProcessConsoleInput(KeyboardEventArgs kArgs) {

        if (kArgs.Code.Equals("ArrowUp"))
        {
            PrintToConsole("Up Arrow pressed.");
        }

        if (kArgs.Code.Equals("Enter"))
        {
            string entry = ConsoleInput;

            foreach(char c in BADCHARS)
                entry = entry.Replace(c, ' ');
            
            entry = entry.ToLower().Trim();

            while(entry.Contains("  "))
             entry = entry.Replace("  ", " ");

            if (String.IsNullOrEmpty(entry))
                return;
            
            if (entry.Equals("clear"))
            {
                ConsoleOutput = "";
            }

            else if (entry.Equals("red"))
            {
                SVG_Markup = Rect(0, 0, WIDTH, HEIGHT, RedColor);
            }

            else if (entry.Equals("green"))
            {
                SVG_Markup = Rect(0, 0, WIDTH, HEIGHT, GreenColor);
            }

            else if (entry.Equals("blue"))
            {
                SVG_Markup = Rect(0, 0, WIDTH, HEIGHT, BlueColor);
            }

            else
            {
                PrintToConsole("You entered: " + entry);
            }

            ConsoleEntries.Add(entry);
            ConsoleEntriesIndex = ConsoleEntries.Count - 1;
            ConsoleInput = ">> ";
        }

    }

    private void PrintToConsole(string str) {

        ConsoleOutput  = ("<div> - " + str + "</div>" + ConsoleOutput);
    }

    public string Rect(int x, int y, int width, int height, string color) {

        return "<rect x=\"" + x
            + "\" y=\"" + y
            + "\" width=\"" + width
            + "\" height=\"" +height
            + "\" fill=\"" + color + "\"></rect>";
    }

    public string GetHexColor(int r, int g, int b) {

        return "#" + Convert.ToHexString(new byte[3] {(byte)r, (byte)g, (byte)b});
    }

}